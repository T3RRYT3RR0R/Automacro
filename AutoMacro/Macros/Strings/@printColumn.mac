@printColumn { dependencies: "@Strlen 32" @while
  @printColumn usage: %@printColumn% <y> <x> <width> [vtColor] "string"

<$
  // substring variable defined once during macro definition 16x16 = 256 characters long
  Set "$magicString=                "
  set "$magicString=!$magicString: =                !"
$>

  // append function terminator and enforce leading space
  Set ^"@.args= ^!@.args:"=^! \\END\\"

  For /f "tokens=1,2,3,4,5 delims= " %%A in ("^!@.args^!")Do if not "%%~5" == "" (
    Set "$bar=^!$magicString:~0,%%C^!"
    Set "$bar=^!$bar: =q^!"

    // split positional args from output string
    Set "@.args=^!@.args: %%A %%B %%C %%D = ^!"

    // ensure control flow variable undefined
    Set "@.sentence="

    // prep output variable
    Set "$printColumn=[%%A;%%BH[%%Dm(0l^!$bar^!k(B[B[%%BG[%%CX(0x(B"

    // test arg 4 matches vt Pattern, if false:
    For /f "delims=0123456789;" %%G in ("%%~D")do (

      // inject arg 4 back into argString
      Set "@.args= %%D^!@.args^!"

      // assume default color
      Set "$printColumn=[%%A;%%BH[0m(0l^!$bar^!k(B[B[%%BG[%%CX(0x(B"
    )

    // iterate token 1 of argString until \\END\\ marker reached
    // while enables token repetition when word length exceeds column width
    !@while:* if not defined dowhile=! (
      For /f "tokens=1 delims= " %%1 in ("^!@.args^!")Do If not "%%1" == "\\END\\" (
        Set "@.word=%%1"

        // take a maximum charchter length EQU to column width from token 1
        Set "@.truncated=^!@.word:~0,%%C^!"

        // test length of current line with token appended
        Set "$temp=^!@.sentence^!^!@.truncated^!"
        !@strlen! $temp $len

        For /f "delims=" %%W in ("^!@.truncated^!")do (
          // if length within bound of column
          if ^!$len^! LEQ %%C (

            // append to control flow variable w/trailing whitespace
            Set "@.sentence=^!@.sentence^!^!@.truncated^! "

            // append to output variable
            Set "$printColumn=^!$printColumn^!^!@.truncated^! "

            // remove truncated token from argString
            Set "@.args=^!@.args:* %%W= ^!"
          )Else (
            // remove trailing whitespace; move cursor to next colmn position and fill background
            Set "$printColumn=^!$printColumn:~0,-1^![%%BG[%%CC[C(0x(B[B[%%BG(0x(B[%%CX"

            // undefine control flow variable
            Set "@.sentence="
          )
        )
      )Else !@endwhile!
    )
    Echo(^!$printColumn:`= ^![%%BG[%%CC[C(0x[B[%%BGm^!$bar^!j(B[0m
  )
} @printColumn /args
