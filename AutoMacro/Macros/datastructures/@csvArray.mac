@csvArray { dependencies: @strlen @while
  @csvArray usage: %@csvArray% <arrayName> <comma, separated, value list>
  @csvArray usage: arrayName            : your custom return variable
  @csvArray usage: comma seperated list : the values to be appended to the array seperated by ','
  <$
    Set "Set @.csvArray.returnLen="
    If defined @.init if not "!@.init:/len=!" == "!@.init!" Set @.returnLen=true
  $>

  // remove any doublequotes
  Set ^"@.args=^!@.args:"=^!"

  For /f "tokens=1 delims= " %%1 in ("^!@.args^!")Do (

    // split array name from element list
    Set "@.args=^!@.args:*%%1 =^!"

    // add trailing delim for substring operations
    Set "@.args=^!@.args^!, "

    // initialize array start index if not already defined
    If not defined %%1[i] Set "%%1[i]=0"

    // iterate args until undefined
    !@while! if defined @.args (

      // increment array index
      Set /a "%%1[i]+=1"

      // split values on delimiter pairing: ", " using substring removal and length calculation
      // this approach is safe for all characters.
      Set "%%1[^!%%1[i]^!]=^!@.args:*, =, ^!"

      // get length of all remaining args
      !@strlen! @.args $arg.len
      // get length of args without this arg
      !@strlen! %%1[^!%%1[i]^!] $len
      // calculate the length of this arg
      Set /a $arg.len-=$len

      For %%L in (^!$len^!)Do (
        // Assign array element
        Set "%%1[^!%%1[i]^!]=^!@.args:~0,-%%~L^!"

        // Assign length of array element if macro initialised with /len switch
        If defined @.returnLen Set "%%1[^!%%1[i]^!].len=^!$arg.len^!"
        Set "@.args=^!@.args:*, =^!"
      )
    )Else !@endWhile!
  )
} @csvArray /args /selfRef